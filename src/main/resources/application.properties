server.port=8082

#spring.datasource.url=jdbc:mysql://localhost:3306/test
#spring.datasource.userName=root
#spring.datasource.password=root

#spring.datasource.url=jdbc:mysql://${RDS_HOSTNAME:localhost}:${RDS_PORT:3306}/${RDS_DB_NAME:test}
#spring.datasource.username=${RDS_USERNAME:dummyUsr}
#spring.datasource.password=${RDS_PASSWORD:dummyPass}

spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.userName=dummyUsr
spring.datasource.password=dummyPass

#It switches the "automatic table creation" feature on and off and is vendor independent.
spring.jpa.generate-ddl=true



#It is a Hibernate feature that controls the "automatic table creation" behavior in a more fine-grained way. 
#create :  Hibernate first drops existing tables, then creates new tables
#update :  the object model created based on the mappings (annotations or XML) is compared with the existing schema, and then Hibernate updates the schema according to the diff. It never deletes the existing tables or columns even if they are no more required by the application
#create-drop :  similar to create, with the addition that Hibernate will drop the database after all operations are completed. Typically used for unit testing
#validate :  Hibernate only validates whether the tables and columns exist, otherwise it throws an exception
#none :  this value effectively turns off the DDL generation
#Spring Boot internally defaults this parameter value to create-drop if no schema manager has been detected, otherwise none for all other cases.
spring.jpa.hibernet.ddl-auto=create-drop



spring.jpa.hibernet.naming-strategy=org.hibernate.cfg.improvednamingstrategy

#When JPA EntityManagerFactory or Hibernate SessionFactory instance created, internally the Dialect instance will be created.
#When Dialect instance created, it registers all the SQL functions for provided Dialect in configuration, to translate Hibernate queries to SQL Queries and also register all SQL types and Java JDBC types, to map java types to database types and vice versa.
#The SQL types not same for the all data bases, so that specific database will have specific dialect, for example, dialect for the DB2 database is org.hibernate.dialect.DB2Dialect , dialect for the MySql 5 database is org.hibernate.dialect.MySQL5Dialect.
#When you switch from one database to another database, one primary change is changing corresponding Dialect to the database.
spring.jpa.hibernet.dialect=org.hibernate.dialect.MySQL5Dialect

#For showing sql queries into the console
spring.jpa.show-sql=true
# For displaying the value that are being assign to the sql paramiter
logging.level.org.hibernate.type=trace
#Generaly sql are not formatted, hence for showing formatted output in console.
spring.jpa.properties.hibernete.format-sql=true
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl


spring.jpa.properties.hibernate.cache.use_second_level_cache=true

spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory

spring.jpa.properties.javaxpersistence.sharedCache.mode=ENABLE_SELECTIVE

logging.level.net.sf.cache=debug






